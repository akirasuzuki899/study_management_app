version: 2.1
orbs:
  ruby: circleci/ruby@1.1.4
  aws-ecr: circleci/aws-ecr@7.0.0
  aws-ecs: circleci/aws-ecs@2.2.1

jobs:
  build_back:
    docker:
      - image: 'cimg/ruby:2.7.2'
    working_directory: ~/study_management_app/back
    steps:
      - checkout:
          path: ~/study_management_app
      - run: sudo apt-get update
      - run: sudo apt-get install imagemagick libmagickcore-dev libmagickwand-dev
      - ruby/install-deps

  build_front:
    docker:
      - image: 'cimg/node:14.16.0'
    working_directory: ~/study_management_app/front
    steps:
      - checkout:
          path: ~/study_management_app
      - run: npm install
      - run: npm run build

  test_back:
    docker:
      - image: 'cimg/ruby:2.7.2'
      - image: circleci/mysql:8.0.21
        environment:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: study_management_app_test
          MYSQL_USER: root
        command: [--default-authentication-plugin=mysql_native_password]
    environment:
      RAILS_ENV: test
      DATABASE_HOST: '127.0.0.1'
    working_directory: ~/study_management_app/back
    steps:
      - checkout:
          path: ~/study_management_app
      - run: sudo apt-get update
      - run: sudo apt-get install imagemagick libmagickcore-dev libmagickwand-dev
      - ruby/install-deps
      - run:
          command: bundle exec rails db:create
      - run:
          command: bundle exec rails db:migrate
      - ruby/rspec-test
  
  test_front:
    docker:
      - image: 'cimg/node:14.16.0'
    working_directory: ~/study_management_app/front
    steps:
      - checkout:
          path: ~/study_management_app
      - run: npm install
      - run: npm run build
      - run: npm run test
      

workflows:
  test_build_and_deploy:
    jobs:
      # - build_back
      # - build_front
      # - test_back:
      #     requires:
      #       - build_back
      # - test_front:
      #     requires:
      #       - build_front
      - aws-ecr/build-and-push-image:
          name: build-and-push-image-back
          account-url: AWS_ECR_ACCOUNT_URL
          aws-access-key-id: ACCESS_KEY_ID
          aws-secret-access-key: SECRET_ACCESS_KEY
          dockerfile: Dockerfile.prd
          path: ./back/
          region: AWS_REGION
          repo: ${REPO_NAME_BACK}
          tag: ${CIRCLE_SHA1}
          # requires:
          #   - test_back
          # filters:
          #   branches:
          #     only:
          #       - main
      - aws-ecr/build-and-push-image:
          name: build-and-push-image-front
          account-url: AWS_ECR_ACCOUNT_URL
          aws-access-key-id: ACCESS_KEY_ID
          aws-secret-access-key: SECRET_ACCESS_KEY
          dockerfile: Dockerfile.prd
          path: ./front/
          region: AWS_REGION
          repo: ${REPO_NAME_FRONT}
          tag: ${CIRCLE_SHA1}
          # requires:
          #   - test_front
          # filters:
          #   branches:
          #     only:
          #       - main
      - aws-ecs/deploy-service-update:
          aws-access-key-id: ACCESS_KEY_ID
          aws-secret-access-key: SECRET_ACCESS_KEY
          aws-region: AWS_REGION
          cluster-name: '${CLUSTER_NAME}'
          container-image-name-updates: 'container=${CONTAINER_NAME_BACK},tag=${CIRCLE_SHA1}'
          family: '${FAMILY_NAME_BACK}'
          requires:
            - build-and-push-image-back
          # filters:
          #   branches:
          #     only:
          #       - main
      - aws-ecs/deploy-service-update:
          aws-access-key-id: ACCESS_KEY_ID
          aws-secret-access-key: SECRET_ACCESS_KEY
          aws-region: AWS_REGION
          cluster-name: '${CLUSTER_NAME}'
          container-image-name-updates: 'container=${CONTAINER_NAME_FRONT},tag=${CIRCLE_SHA1}'
          family: '${FAMILY_NAME_FRONT}'
          requires:
            - build-and-push-image-front
          # filters:
          #   branches:
          #     only:
          #       - main